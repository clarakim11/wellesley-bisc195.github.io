name: Sync

on:
  workflow_dispatch:
    inputs:
      assignments:
        description: 'List of assignments to rerun the syncing workflow for, formatted as JSON array, e.g. ["exercism/julia"]'
        required: true
        default: ''
  repository_dispatch:
    types: [track_changes]
  push:
    branches:
      - main

env:
  GIT_USERNAME: "bisc195-bot"
  GIT_EMAIL: "85358070+bisc195-bot@users.noreply.github.com"

jobs:

  push-to-assignments:
    name: Push to ${{ matrix.assignment }}
    runs-on: ubuntu-20.04
    timeout-minutes: 30

    # Launch one job per assignment.
    # This is probably less efficient than running everything in one job
    # and manually cloning and checking out the repos. However, launching a job
    # lets us use actions like actions/checkout.
    # It also gives us a pretty job overview that makes it easy to spot issues with
    # particular assignments.
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        assignment:
          - 'wellesley-bisc195/Assignment08'
          - 'wellesley-bisc195/Assignment09'

    steps:
      - name: Checkout main repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
        with:
          path: main

      - name: Checkout assignment repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
        with:
          repository: ${{ matrix.assignment }}
          github-token: ${{ secrets.BISC195_BOT_KEY }}
          path: assignment-repo
          fetch-depth: 0

      - name: Checkout new branch on assignment repo
        id: branch
        env:
          ASSIGNMENT: ${{ matrix.assignment }}
        run: |
          cd assignment-repo

          # github.run_number is a unique ID for each workflow run in a repo
          # WARNING: the run_number will NOT be updated if a workflow is re-run
          branch="ðŸ¤–/wellesley-bisc195/${{ github.run_number }}"
          git checkout -b "$branch"

          echo "::set-output name=name::$branch"

      - name: Copy synced files to assignment repo
        env:
          ASSIGNMENT: basename ${{ matrix.assignment }}
        run: |
          cp -a main/assignment_repos/$ASSIGNMENT assignment-repo/

      - name: Check for changes
        id: changes
        run: |
          cd assignment-repo

          if [ -z "$(git status --porcelain)" ]; then
            echo "No files have changed."
            exit 0
          fi

          echo "::set-output name=changes::true"

      ########################################################
      # ONLY RUN THE REST OF THE SCRIPT IF THERE ARE CHANGES #
      # All following steps must have:                       #
      #   if: steps.changes.outputs.changes == 'true'        #
      ########################################################

      - name: Configure the git user
        if: steps.changes.outputs.changes == 'true'
        run: |
          git config --global user.email "$GIT_EMAIL"
          git config --global user.name "$GIT_USERNAME"

      - name: Commit and push changes
        if: steps.changes.outputs.changes == 'true'
        env:
          ASSIGNMENT_REPO_FULLNAME: ${{ matrix.assignment }}
          BISC195_BOT_KEY: ${{ secrets.BISC195_BOT_KEY }}
        with:
          github-token: ${{ secrets.BISC195_BOT_KEY }}
        run: |
          cd assignment-repo

          # Show diff for debugging
          git diff

          git add .

          # The commit message assumes that one push maps to exactly one commit
          # If a push contains several commits, the commit message will only link to the last one
          git commit -m "ðŸ¤– Sync org-wide files to upstream repo" -m "More info: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$GITHUB_SHA"

          # Push commitq
          git push "$GITHUB_SERVER_URL/$ASSIGNMENT_REPO_FULLNAME.git"

      - name: Open pull request on assignment repo
        if: steps.changes.outputs.changes == 'true'
        uses: actions/github-script@a3e7071a34d7e1f219a8a4de9a5e0a34d1ee1293
        env:
          ASSIGNMENT_REPO_FULLNAME: ${{ matrix.assignment }}
          BRANCH_NAME: ${{ steps.branch.outputs.name }}
        with:
          github-token: ${{ secrets.BISC195_BOT_KEY }}
          script: |
            const repo = process.env.ASSIGNMENT_REPO_FULLNAME.split('/')[1]

            github.pulls.create({
              owner: 'exercism',
              repo,
              title: 'ðŸ¤– Sync org-wide files to upstream repo',
              head: `exercism-bot:${process.env.BRANCH_NAME}`,
              base: 'main',
              body: `More info: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/commit/${process.env.GITHUB_SHA}`,
              maintainer_can_modify: false
            })
